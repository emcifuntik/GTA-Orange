diff --git Source/web/ChromeClientImpl.cpp Source/web/ChromeClientImpl.cpp
index f274fb4..2aa6a17 100644
--- Source/web/ChromeClientImpl.cpp
+++ Source/web/ChromeClientImpl.cpp
@@ -873,7 +873,7 @@ bool ChromeClientImpl::hasOpenedPopup() const
 PopupMenu* ChromeClientImpl::openPopupMenu(LocalFrame& frame, HTMLSelectElement& select)
 {
     notifyPopupOpeningObservers();
-    if (WebViewImpl::useExternalPopupMenus())
+    if (m_webView->useExternalPopupMenus())
         return new ExternalPopupMenu(frame, select, *m_webView);
 
     DCHECK(RuntimeEnabledFeatures::pagePopupEnabled());
diff --git Source/web/WebViewImpl.cpp Source/web/WebViewImpl.cpp
index cae232a..2ed1596 100644
--- Source/web/WebViewImpl.cpp
+++ Source/web/WebViewImpl.cpp
@@ -417,6 +417,7 @@ WebViewImpl::WebViewImpl(WebViewClient* client, WebPageVisibilityState visibilit
     , m_enableFakePageScaleAnimationForTesting(false)
     , m_fakePageScaleAnimationPageScaleFactor(0)
     , m_fakePageScaleAnimationUseAnchor(false)
+    , m_shouldUseExternalPopupMenus(shouldUseExternalPopupMenus)
     , m_doingDragAndDrop(false)
     , m_ignoreInputEvents(false)
     , m_compositorDeviceScaleFactorOverride(0)
@@ -4092,9 +4093,14 @@ void WebViewImpl::pageScaleFactorChanged()
     m_client->pageScaleFactorChanged();
 }
 
+void WebViewImpl::setUseExternalPopupMenusThisInstance(bool useExternalPopupMenus)
+{
+    m_shouldUseExternalPopupMenus = useExternalPopupMenus;
+}
+
 bool WebViewImpl::useExternalPopupMenus()
 {
-    return shouldUseExternalPopupMenus;
+    return m_shouldUseExternalPopupMenus;
 }
 
 void WebViewImpl::startDragging(LocalFrame* frame,
diff --git Source/web/WebViewImpl.h Source/web/WebViewImpl.h
index 26e93e7..86240c7 100644
--- Source/web/WebViewImpl.h
+++ Source/web/WebViewImpl.h
@@ -388,7 +388,8 @@ public:
 
     // Returns true if popup menus should be rendered by the browser, false if
     // they should be rendered by WebKit (which is the default).
-    static bool useExternalPopupMenus();
+    void setUseExternalPopupMenusThisInstance(bool);
+    bool useExternalPopupMenus();
 
     bool shouldAutoResize() const
     {
@@ -683,6 +684,8 @@ private:
     float m_fakePageScaleAnimationPageScaleFactor;
     bool m_fakePageScaleAnimationUseAnchor;
 
+    bool m_shouldUseExternalPopupMenus;
+
     bool m_doingDragAndDrop;
 
     bool m_ignoreInputEvents;
diff --git public/web/WebView.h public/web/WebView.h
index bba44bc..345f5c2 100644
--- public/web/WebView.h
+++ public/web/WebView.h
@@ -438,6 +438,7 @@ public:
 
     // Sets whether select popup menus should be rendered by the browser.
     BLINK_EXPORT static void setUseExternalPopupMenus(bool);
+    virtual void setUseExternalPopupMenusThisInstance(bool) = 0;
 
     // Hides any popup (suggestions, selects...) that might be showing.
     virtual void hidePopups() = 0;
